#!/usr/bin/env python3

from collections import OrderedDict
import sys
import re

dir_script = sys.path[0] + '/'
dir_edrefcard = dir_script + 'edrefcard'
dir_config = dir_script + '../config'
sys.path.append(dir_edrefcard)
from bindingsData import *


def delTodo(line):
    matches = re.match('(.*)\s*(?:TODO.*)$', line)
    if matches:
        return matches.group(1)
    return line


# Read comments from python data structure and return as two maps
def loadComments():
    # Read hotasDetails comments (as they contain comments about buttons to inputs)
    inFile = open(dir_edrefcard + '/bindingsData.py', 'r')
    hotasDetails = False
    devName = ""
    devCmnt = {}
    devInpCmnt = {}
    while True:
        line = inFile.readline()
        if not line:
            break  # End of file

        # Check if in hotasDetails block
        if not hotasDetails:
            matches = re.match("^hotasDetails\s*=\s*{", line)
            if matches:
                hotasDetails = True
            continue

        matches = re.match("^\s*'([^']+)(?:.*#\s*(.+))?", line)
        if matches:
            if devName == "":
                # Not in a device block, bbut found device
                devName = matches.group(1)
                # Add device comment if it exists
                if matches.lastindex >= 2:
                    devCmnt[devName] = delTodo(matches.group(2))
                else:
                    devCmnt[devName] = ''
            else:
                # In a device block, find input and matching comment
                if devName not in devInpCmnt:
                    devInpCmnt[devName] = {}
                input = matches.group(1)
                if matches.lastindex >= 2:
                    devInpCmnt[devName][input] = delTodo(matches.group(2))
                else:
                    devInpCmnt[devName][input] = ''
            continue

        # Check for end of block
        matches = re.match('^\s*}', line)
        if matches:
            if devName != "":
                # End of the device
                devName = ""
            else:
                # Finished reading hotasDetails block
                hotasDetails = False
                break

    return devCmnt, devInpCmnt


deviceComments, deviceInputComments = loadComments()
deviceNameMap = OrderedDict()
imageMap = {}
for groupName in supportedDevices:
    for shortName in supportedDevices[groupName]['HandledDevices']:
        imageMap[shortName] = supportedDevices[groupName]['Template']

# TODO - Need to handle "KeyDevice" in grouping
completedDevices = {}
outputLines = {}
for name in supportedDevices:
    for device in supportedDevices[name]['HandledDevices']:
        if device == 'Keyboard':
            continue
        if device in completedDevices:
            continue
        completedDevices[device] = True
        comment = ''
        if device in deviceComments and len(deviceComments[device]) > 0:
            comment = ' # {c}'.format(c=deviceComments[device])
        deviceLine = '  {d}:{c}\n'.format(d=device, c=comment)
        outputLines[deviceLine] = []

        for key in hotasDetails[device]:
            if key == 'displayName':
                continue
            shortKey = re.sub('^Joy_', '', key)
            data = hotasDetails[device][key]
            height = 54
            if 'height' in data:
                height = data['height']
            comment = ''
            if len(deviceInputComments[device][key]) > 0:
                comment = ' # {c}'.format(c=deviceInputComments[device][key])
            outputInput = '    {k}: {{ x: {x}, y: {y}, w: {w}, h: {h} }}{c}\n'.format(
                k=shortKey, x=data['x'], y=data['y'], w=data['width'], h=height, c=comment)
            outputLines[deviceLine].append(outputInput)


outFilename = dir_config + '/generatedDevices.yaml'
outFile = open(outFilename, 'w')
outFile.write('''#################################################################
### GENERATED BY generateControllerInputs.py - DO NOT MODIFY. ###
#################################################################
---
''')

# Write out the device map
outFile.write('DeviceMap:\n')
for device in sorted(outputLines.keys()):
    outFile.write(device)
    for inputLine in outputLines[device]:
        outFile.write(inputLine)

outFile.write('ImageMap:\n')
for groupName in sorted(imageMap.keys()):
    outFile.write('  {g} : {i}\n'.format(g=groupName, i=imageMap[groupName]))
outFile.write('''...''')

outFile.close()
